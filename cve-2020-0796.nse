local smb = require "smb"
local stdnse = require "stdnse"
local nmap = require "nmap"
local vulns  = require "vulns"
description = [[

smb-protocols script modified to apply check for CVE-2020-0796 by psc4re. 
Attempts to list the supported protocols and dialects of a SMB server.
Packet check based on https://github.com/ollypwn/SMBGhost/
The script attempts to initiate a connection using the dialects:
* NT LM 0.12 (SMBv1)
* 2.02       (SMBv2)
* 2.10       (SMBv2)
* 3.00       (SMBv3)
* 3.02       (SMBv3)
* 3.11       (SMBv3)

Additionally if SMBv1 is found enabled, it will mark it as insecure. This
script is the successor to the (removed) smbv2-enabled script.

]]
-- nmap -p445 --script cve-2020-0796 192.168.57.3 we use somethings by win10 build 1909 18363 on virtualbox
-- @usage-p445 --script cve-2020-0796 <target>
-- @usage nmap -p445 --script smb-protocols <target>
-- @usage nmap -p139 --script smb-protocols <target>
--
-- @output
-- PORT      STATE SERVICE   REASON
-- 445/tcp open  SMB  SMBGhost
-- | CVE-2020-0796:
-- |   VULNERABLE:
-- |     SMBGhost
-- |     State: VULNERABLE (Exploitable)
-- |     IDs:  CVE-2020-0796
-- |     Description:
-- |       Windows SMBv3 Client/Server (SMBGhost)

author     = {"danny Ravi   @dannyRavi"}
license    = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"vuln","safe"}

hostrule = function(host)
  return smb.get_port(host) ~= nil
end

action = function(host,port)
  local vuln = {
    title = 'Windows SMBv3 Client/Server',
    state = vulns.STATE.NOT_VULN, -- default
    description = [[

      smb-protocols script modified to apply check for CVE-2020-0796 by psc4re. 
      Attempts to list the supported protocols and dialects of a SMB server.
      Packet check based on https://github.com/ollypwn/SMBGhost/
      The script attempts to initiate a connection using the dialects:
      * NT LM 0.12 (SMBv1)
      * 2.02       (SMBv2)
      * 2.10       (SMBv2)
      * 3.00       (SMBv3)
      * 3.02       (SMBv3)
      * 3.11       (SMBv3)
      
      Additionally if SMBv1 is found enabled, it will mark it as insecure. This
      script is the successor to the (removed) smbv2-enabled script.
      
      ]],
    IDS = {CVE = 'CVE-2020-0796'},
    references = {
        'https://nvd.nist.gov/vuln/detail/CVE-2020-0796',
        'https://github.com/ollypwn/SMBGhost/',
        'https://github.com/psc4re/NSE-scripts'
    },
    dates = {
      disclosure = {year = '2021', month = '03', day = '30'},
    },
  }
  local report = vulns.Report:new(SCRIPT_NAME, host, port)
  local status, supported_dialects, overrides
  local output = stdnse.output_table()
  overrides = {}
  status, supported_dialects = smb.list_dialects(host, overrides)
  if status then
    for i, v in pairs(supported_dialects) do -- Mark SMBv1 as insecure
      if v == "NT LM 0.12" then
        supported_dialects[i] = v .. " (SMBv1) [dangerous, but default]"
      end
      if v == "3.11" then
        local msg 
        local response
        local compresionalg
        local comp
        msg = '\x00\x00\x00\xc0\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\x00\x08\x00\x01\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00x\x00\x00\x00\x02\x00\x00\x00\x02\x02\x10\x02"\x02$\x02\x00\x03\x02\x03\x10\x03\x11\x03\x00\x00\x00\x00\x01\x00&\x00\x00\x00\x00\x00\x01\x00 \x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\n\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
        local socket = nmap.new_socket()
        socket:set_timeout(3000)
        socket:connect(host.ip,445)
        socket:send(msg)
        response,data = socket:receive()
        compressionalg=  string.sub(data,-2)    
        if compressionalg == "\x01\x00" then
          comp = "LZNT1 compression algorithm - Vulnerable to CVE-2020-0796 SMBGhost"
          vuln.state = vulns.STATE.VULN
        elseif compressionalg == "\x02\x00" then
          comp ="LZ77 compression algorithm - Vulnerable to CVE-2020-0796 SMBGhost"
          vuln.state = vulns.STATE.VULN
        elseif compressionalg == "\x00\x00" then
          comp ="No Compression Not Vulnerable"
          vuln.state = vulns.STATE.NOT_VULN
        elseif compressionalg == "\x03\x00" then
          comp="LZ77+Huffman compression algorithm - Vulnerable to CVE-2020-0796 SMBGhost"
          vuln.state = vulns.STATE.VULN
        else
          vuln.state = vulns.STATE.NOT_VULN
        end

      end
    end
    -- output.dialects = supported_dialects
  end
  return report:make_output(vuln)
end
